{
  "GL_Date": "08/04/25",
  "Invoice_Number": "01-871060",
  "Invoice_Date": "08/04/25",
  "Invoice_Amount": "356.00",
  "Amount_Before_Taxes": "324.00",
  "Tax_Amount": "32.00",
  "Shipping_Charges": "0.00",
  "__prompt": "\nYou are an expert invoice data extraction system designed for messy OCR-scanned documents from various vendors. Extract exactly the 7 fields below from the OCR text and return a flat, clean **JSON object**.\n\nIf any field is unclear or missing, return it as an empty string `\"\"`. Do not guess. Do not add extra fields or formatting.\n\n---\n\n\ud83d\udccc FIELDS TO EXTRACT:\n\n1. **GL_Date**\n   - Format: MM/DD/YY\n   - Use Invoice_Date if GL_Date is missing (they are always the same).\n\n2. **Invoice_Number**\n   - Look for: \"Invoice #\", \"Invoice No.\", \"Inv #\", \"Doc #\", \"Credit Memo\", or any line that contains \"Credit\" followed by a number\n   - Extract only the number \u2014 do not include words like \"Credit Memo\"\n   - Examples: From \"CREDIT SLAKEY MEMO 859388323\", extract \"859388323\"\n   - \u26d4 Avoid: \"Customer Number\", \"Cust No.\", \"Account #\"\n   - Remove symbols like `#`, `:`.\n\n3. **Invoice_Date**\n   - Look for: \"Invoice Date\", \"Date Issued\", \"Inv Date\"\n   - Format: MM/DD/YY\n   - If multiple dates found, return the earliest valid one.\n\n4. **Invoice_Amount**\n   - Look for: \"Total Due\", \"Invoice Amount\", \"Amount Due\", \"Balance Due\"\n   - \u26d4 Avoid: \"Subtotal\", \"Tax\", \"Discount\", \"Previous Balance\"\n   - Extract the **largest visible amount** from valid labels\n   - Remove symbols: `$`, `,`, `%`, `(`, `)`\n   - Only treat the amount as negative if a clear `-` appears directly in front of the number \u2014 parentheses alone do not imply negative\n\n5. **Amount_Before_Taxes**\n   - Look for: \"Subtotal\", \"Amount Before Tax\", \"Total Before Tax\"\n   - \u26d4 Avoid: \"Tax\", \"Total Due\", \"Invoice Total\", \"Balance Due\"\n   - Remove symbols: `$`, `,`, `%`, `(`, `)`\n   - Only treat the amount as negative if a clear `-` appears directly in front of the number \u2014 parentheses alone do not imply negative\n\n6. **Tax_Amount**\n   - Look for: \"Sales Tax\", \"Tax\", \"Tax Amount\", \"VAT\"\n   - \u26d4 Avoid: \"Total\", \"Subtotal\", \"Before Tax\", \"After Tax\"\n   - Extract the first valid amount shown near the correct label \u2014 even if negative\n   - Include negative sign if a clear `-` appears directly in front of the number\n   - Remove all symbols: `$`, `,`, `%`, `(`, `)`\n   - Only treat the amount as negative if a clear `-` appears directly in front of the number \u2014 parentheses alone do not imply negative\n\n7. **Shipping_Charges**\n   - Look for: \"Shipping\", \"Freight\", \"Delivery\", \"Handling\", \"S&H\", \"Shipping & Handling\"\n   - Extract the amount shown next to these labels\n   - Remove symbols: `$`, `,`, `%`, `(`, `)`\n   - Only treat as negative if a clear `-` appears directly in front of the number\n   - If no shipping charges found, return empty string\n\n---\n\n\u2757 LOGICAL RULES:\n- If Tax_Amount is present and greater than 0, then Invoice_Amount and Amount_Before_Taxes **must be different**, based on the actual visible values\n- Never extract the same amount for both fields if Tax_Amount is present\n- Only use amounts shown clearly next to their correct labels \u2014 no guessing or assumptions\n\n---\n\n\ud83d\udccf OUTPUT RULES:\n- Dates must be in MM/DD/YY format\n- Amounts are clean numbers without formatting\n- Parentheses do not imply negative unless a clear `-` is present\n- Return a clean JSON with exactly the 7 fields \u2014 no extra text or formatting\n\n---\n\n\ud83e\uddfe OCR TEXT START:\nINVOICE\na\nInvoice\nC\nB01S\nDate Invoice #\nShipped From\nFastening & Construction! Solutions\n08/04/2025 01-871060\nSAN. JOSE BRANCH\nREMIT: PO BOX 8464, PASADENA, CA 91109-8464 430 E. TRIMBLE RD\nPage: 1 of 1\nSAN JOSE, CA 95131\nSSI P#\nPhone: 408-817-8900 * Fax: 408-817-8910\nTracking #:\nJOB:\nMTL\nMATERIAL\nLS REF: MTL\nBILLTO: 39480\nSHIP TO:\nALL AIR MECHANICAL CO.\nALL AIR MECHANICAL CO.\n535 RAILROAD. AVENUE\n950 HOUGH. AVE\nS.SAN FRANCISCO, CA 94080\nLAFAYETTE, CA 94549\nINVOICE DUE DATE: 09/03/25\nDeliver between 7-9 a.m.\nEntered By: TROA02\nSPECIAL INSTRUCTIONS:\nORDER NO. Order Date SLSREP\nCUST PO.\nShip Via\nSHIP DATE\nTERMS\n01-01431918 08/01/2025 024\n25.09\nL&S TRUCK 08/01/2025\nNET: 30\nOrder Qty Order Ship Qty\nITEMI NO.\nDESCRIPTION\nUnit Price PRC\nExt\nUM\nUM\nPrice\n200 FT\n200 SC14HS010X\n14GA 13/16\" X 10FT HALF-SLOT PG\n$1.300 FT\n$260.00\n200 FT\n200 401103761000X\nALL THREAD 3/8-16 (10FT) ZP\n$0.320 FT\n$64.00\nDeliver between 7-9 a.m.\nSALE AMOUNT\n$324.00\n9.8750 % SALES TAX\n$32.00\nFREIGHT\n$0.00\nDelivered to: VIJAY\n8/4/25 11:17\nDISCOUNT\n$0.00\nDriver code: 01NESTOR\nMISC. CHARGE\n$0.00\nHANDLINGICC FEE\n$0.00\nTHIS ORDER IS ACCEPTED PERI LORD & SONS TERMS AND CONDITIONS\nRead terms on reverse side\nTOTAL\n$356.00\nTo set up payment via ACH or to email your invoices, please email us at AR@lordandsons.com\nNEW Remit to address: Lord and Sons, Inc., PO BOX 8464 PASADENA, CA 91109-8464\n3% fee on credit card payments\n\ud83e\uddfe OCR TEXT END\n\n---\n\nSUCCESS: RETURN:\nA JSON object with exactly the 7 fields. Leave missing fields as empty strings `\"\"`.\n"
}